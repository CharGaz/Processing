/* autogenerated by Processing revision 1293 on 2024-10-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Processing extends PApplet {


int numPeople = 20;

Person[] person = new Person[numPeople];


int sick = color(255,0,0);
int healthy = color(0,255,0);
int doctor = color(0,0,255);

int[] colours = {sick, healthy, doctor};

public void setup(){
  /* size commented out by preprocessor */;
  
  // Person jameli = new Person(50.0,360.0,7.0,0.0,255);
  // jameli.drawMe();

  for(int i = 0; i < person.length; i++){
    float xPos = random(20,width-20);  //The length of the radius away from the borders, the full ball will be in the canvas
    float yPos = random(20,height-20);
    float xVel = random(-4,4);
    float yVel = random(-4,4);


    person[i] = new Person(xPos, yPos, xVel, yVel, 40, colours[PApplet.parseInt(random(colours.length))]);
    
  }
}

public void draw(){
  background(0);

  for(int i = 0; i < person.length; i++){
    person[i].drawMe();
    person[i].updatePos(); 
    for(int j = i+1; j < (person.length); j++){
      person[i].checkCollision(person[j]);
    }
  }
}
class Person{
    PVector pos;
    PVector vel;
    int diam;
    int status;

    //CONSTRUCTOR:
    Person(float x, float y, float xVel, float yVel, int d, int c){
        this.pos = new PVector(x,y);
        this.vel = new PVector(xVel,yVel);
        this.diam = d;
        this.status = color(c);
    }

    public void drawMe(){
        fill(this.status);
        circle(this.pos.x, this.pos.y, 40);
    }

    public void updatePos(){
        this.pos.add(this.vel);

        if(this.pos.x <= this.diam/2 || this.pos.x >= width-(this.diam/2)){
            this.vel.x *= (-1);
        }
        
        if(this.pos.y <= this.diam/2 || this.pos.y >= height-(this.diam/2)){
            this.vel.y *= (-1);
        }
    
    }

    public void checkCollision(Person other){
        PVector collided = new PVector(other.pos.x - this.pos.x, other.pos.y - this.pos.y);

        if(collided.mag() <= this.diam){
            PVector collidedHat = collided.normalize(null);

            float k = this.vel.dot(collidedHat) - other.vel.dot(collidedHat);
            PVector deltaVel = PVector.mult(collidedHat,-k);
            PVector deltaOtherVel = PVector.mult(collidedHat,k);

            this.vel.add(deltaVel);
            other.vel.add(deltaOtherVel);


            if(this.status == colours[0] && other.status == colours[1]){ //making healthy people sick
                other.status = colours[0]; //Turning the colour red
                other.vel.mult(0.7f); //Slowing the sick
            }
            else if(this.status == colours[1] && other.status == colours[0]){ //making healthy people sick
                this.status = colours[0]; //Turning the colour red
                this.vel.mult(0.7f); //Slowing the 
            }

            else if(this.status == colours[0] && other.status == colours[2]){ //making sick people healthy
                this.status = colours[1]; //Turning the colour green
                this.vel.mult(1.3f);
            }
            else if(this.status == colours[2] && other.status == colours[0]){ //making sick people healthy
                other.status = colours[1]; //Turning the colour green
                other.vel.mult(1.3f);
            }
        }
    }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
