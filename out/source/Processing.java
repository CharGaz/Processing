/* autogenerated by Processing revision 1293 on 2024-11-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;
import g4p_controls.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Processing extends PApplet {




PImage soundImg;
PImage speedImg;

boolean playSong = false;
boolean playStatus = false;
boolean displayPlay = true;
boolean isLooping = false;



ArrayList<Song> playlist = new ArrayList<Song>();
int songIndex = 0;
int loopIndex = 1;

float playBackSpeed = 1.0f;
float setVolume = 0.9f;

// Audio Analyzer Setup
int bands;
float[] spectrum;
AudioIn in;
FFT fft;
AudioVisualizer audioVisualizer;

SoundFile currentSong;
public void setup(){
  /* size commented out by preprocessor */;
  background(197, 211, 232);

  frameRate(120);

  playlist.add(new Song(this,"Benzi Box.mp3","Mouse and the Mask", "Mouse and the Mask.jpeg"));
  playlist.add(new Song(this, "Darling I.mp3","Chromakopia","Chromakopia Album.jpeg" ));
  playlist.add(new Song(this,"St Chroma.mp3","Chromakopia","Chromakopia Album.jpeg"));
  playlist.add(new Song(this, "Doomsday.mp3", "Operation: DOOMSDAY","Operation Doomsday Album Cover.jpeg" ));
  playlist.add(new Song(this, "Rhymes Like Dimes.mp3", "Operation: DOOMSDAY","Operation Doomsday Album Cover.jpeg" ));
  playlist.add(new Song(this, "Potholderz.mp3", "MM Food","MM Food.jpeg" ));

  bands = 512;
  spectrum = new float[bands];
  fft = new FFT(this, bands);
   
  audioVisualizer = new AudioVisualizer(950, width-25);
    
  createGUI();
  soundImg = loadImage("Audio button.png");

  if(!playlist.isEmpty()) {
    currentSong = playlist.get(songIndex).song;
    fft.input(currentSong); // Connect FFT to the first song
  }
}

public void draw(){
  background(197, 211, 232);
  drawUI();
  image(soundImg,880,530, 48,48);
  drawSongs();
  
  if(playlist.size() > 0){
      playlist.get(songIndex).displayInfo(this);
    }

  

   playlist.get(songIndex).playSong(playBackSpeed, setVolume);//Putting the playback speed and volume into the song class
  
  if(!playlist.get(songIndex).song.isPlaying() && playStatus){
    
    playStatus = false;
    if(!isLooping){
      songIndex = (songIndex + 1) % playlist.size();
    }

    updateFFTInput();
    
  }
  
  fft.analyze(spectrum);
  audioVisualizer.update();

}

public void updateFFTInput() {
  SoundFile newSong = playlist.get(songIndex).song;
  if(currentSong != newSong) {
    currentSong = newSong;
    fft.input(currentSong); // Reconnect FFT only if the song changes
  }
}

public void drawUI(){
  // left frame
  fill(208, 232, 197);
  strokeWeight(0);
  rect(0, 0, 200, height);
  
  // bottom frame
  rect(200, height - 150, 925, height - 150);

  //right frame
  fill(208,232,197);
  strokeWeight(0);
  rect(925,0, width, height);
  
  // divisor lines
  stroke(166, 174, 191);
  fill(166, 174, 191);
  strokeWeight(2);
  rect(200, 0, 5, height);    // left line
  rect(205, height - 150, 723, 5);    // bottom line
  rect(925, 0, 5, height); //right line
  rect(925,300, width, 5); // right panal divisor
  
  //Having either play or pause button on the screen at one given time
  if(displayPlay){
    play_button.setVisible(true);
    pause_button.setVisible(false);
  }
  else{
    play_button.setVisible(false);
    pause_button.setVisible(true);
  }


  //Changing the loop button from black(off) to white(on)
  if((loopIndex % 2) == 0){
    loop_button.setVisible(false);
    loop_buttonWhite.setVisible(true);
  }

  else{
    loop_button.setVisible(true);
    loop_buttonWhite.setVisible(false);

  }
  
}

public void drawSongs(){
  int x = 250; //Setting base x and y values 
  int y = 50;

  for(int i = 0; i < playlist.size(); i++){
    playlist.get(i).printSongs(this,x,y); //Inputs all song info into printSongs function
    noFill();
    strokeWeight(5);
    rect(x-40,y-25, 125,50);
    x += 180; //Moves x over by 200 every time
    
    if(x > 900){
      x = 250; //When x reaches the end of panal, it resest to the start
      y += 100; //When x resets, y moves down to create a new row
    }
  }
}

public void shufflePlaylist(ArrayList<Song> d){
    if(playlist.size() < 2){
        return;
    }

    //Resets each song in playlist to make sure it starts from beginning of song 
    for(Song song : d){
      song.reset();
    }

    for(int i = d.size() - 1; i > 0; i--){
        int j = PApplet.parseInt(random(i+1));
        Song temp = d.get(i);
        playlist.set(i,d.get(j));
        playlist.set(j,temp);
    }
}
class AudioVisualizer{
  float p1, p2;    // top left and bottom right of graph
  int f = 0;
  int amp = 20;
  float lerpIntensity = 0.1f;
  
  float[] prev1 = new float[bands];
  float[] prev2 = new float[bands];
  float[] prev3 = new float[bands];
  float[] prev4 = new float[bands];

  
  AudioVisualizer(float pos1, float pos2){
    this.p1 = pos1;
    this.p2 = pos2;
  }
  
  public void update(){
    fft.input(playlist.get(songIndex).song);
    
    if(f%1==0) fft.analyze(spectrum);
    
    float highestBand = 0;
    float lowestBand = 0;
    for(int i = 0; i < bands; i++){
      if(highestBand > spectrum[i]){
        highestBand = spectrum[i];
      }
      if(spectrum[i] < lowestBand){
        lowestBand = spectrum[i];
      }
    }
    
    float[] reducedSpectrum = new float[bands/2];
    
    for(int i = 0; i < bands; i+=2){
      reducedSpectrum[i/2] = (spectrum[i] + spectrum[i+1]) / 2;
    }
    
    for(int i = 0; i < reducedSpectrum.length; i++){
      reducedSpectrum[i] = lerp(prev1[i], reducedSpectrum[i], lerpIntensity);
    }
    
    for(int i = 0; i < reducedSpectrum.length; i++){
      stroke(128, 0, 128 + i);
      strokeWeight(3);
      float newI = map(i, 0, (bands - 1)/2, p1, p2);
      float newY;
      //float newY = map(height - 50 - spectrum[i]*height*10, 0, height - 50 - spectrum[i]*height*10, 0, height - 50 - highestBand*height*10);
      
      if(prev1 != null && prev2 != null && prev3 != null && prev4 != null){
        //newY = height - 50 - (reducedSpectrum[i]*height*amp + prev1[i]*height*amp + prev2[i]*height*amp + prev3[i]*height*amp + prev4[i]*height*amp) / 5;
        newY = (reducedSpectrum[i] + prev1[i] + prev2[i] + prev3[i] + prev4[i]) / 5;

      }
      else{
        //newY = height - 50 - reducedSpectrum[i]*height*amp;
        newY = reducedSpectrum[i];

      }
      strokeWeight(1);
      //line(newI, height - 50, newI, height - 50 - newY*amp*height);
      newY = constrain(newY*amp*400, 0, 250 + random(0, 5));
      ellipse(newI, height - 150, 1, newY);

    }
    
    prev4 = prev3;
    prev3 = prev2;
    prev2 = prev1;
    prev1 = reducedSpectrum;
    
    f++;
  }
}
class Song{
    String name;
    String album; //may be temperory
    String artWork; //may be temperory
    SoundFile song;
    PImage cover; //Only temp if art will not be displayed

    //CONSTRUCTOR
    Song(PApplet sketch, String n, String a, String aw){
        this.name = n;
        this.album = a;
        this.artWork = aw;
        this.song = new SoundFile(sketch, n, false);
        this.cover = sketch.loadImage(aw);
    }

    public void displayInfo(PApplet sketch){
        
        fill(0);
        textSize(20);
        sketch.text("Album: " + this.album, 935,240);
        sketch.text("Song: " + this.name.substring(0,this.name.length()-4), 935,265);
        sketch.text("Artist: ", 935, 290);

        if(cover != null){
            sketch.image(cover, 967,20, 200,200);
        }

        else{
            sketch.text("no album cover found", 900,200);
        }

        
    }

    public void playSong(float speed, float volume){
        if(playSong){

            

            if(!this.song.isPlaying() && !playStatus){
                playStatus = true;
                this.song.play(speed,volume);
            }
        }
            

        else if(!playSong && playStatus){
            this.song.pause();
            playStatus = false;
        }
    }
    public void stopSong(){
        if(this.song.isPlaying()){
            this.song.stop();
        }
    }

    public void reset(){
        this.song.stop();
        this.song.cue(0.0f);
    }

    public void printSongs(PApplet sketch, int x, int y){
        
        String displayName = this.name.substring(0, this.name.length()-4);

        float fontSize = 16; //base font size
        sketch.textSize(fontSize);

        while(sketch.textWidth(displayName) > 105 ){ //100 is the width of the rect - the edge of rect 
            fontSize -= 0.5f; //Makes font size smaller until text fits into the rectangle
            sketch.textSize(fontSize);
        }

        sketch.fill(0);
        sketch.textAlign(CENTER,CENTER); //Centers text in the rectangle
        sketch.text(displayName,x+20,y);

        sketch.textAlign(LEFT, BASELINE);
    }

}
/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void playClicked(GImageButton source, GEvent event) { //_CODE_:play_button:242900:
  playSong = true;
  displayPlay = false;
} 

public void pauseClicked(GImageButton source, GEvent event) { //_CODE_:pause_button:527890:
  playSong = false;
  displayPlay = true;
} 

public void fastfowardClicked(GImageButton source, GEvent event) { //_CODE_:fast_foward_button:334872:
  playlist.get(songIndex).stopSong();
  if(!isLooping){
    songIndex = (songIndex + 1) % playlist.size();
  }

  else{
    //playlist.get(songIndex).song.jump(0.0);
    songIndex = (songIndex) % playlist.size();
  }
  
  playStatus = false;
} //_CODE_:fast_foward_button:334872:

public void rewindClicked(GImageButton source, GEvent event) { //_CODE_:rewind_button:710650:
  playlist.get(songIndex).stopSong();
  songIndex = (songIndex-1 + playlist.size()) % playlist.size();
  playStatus = false;
} 

public void loopClicked(GImageButton source, GEvent event) { //Loops and unloops song
  loopIndex += 1;
  if((loopIndex % 2) == 0){
    isLooping = true;
    
  }
  else{
    isLooping = false;
  }
  
} 

public void whiteLoopClicked(GImageButton source, GEvent event) { //Loops and unloops song
  loopIndex += 1;

  if((loopIndex % 2) == 0){
    isLooping = true;
  }
  else{
    isLooping = false;
  }
} 


public void shuffleClicked(GImageButton source, GEvent event) { //_CODE_:shuff_button:228625:
  if(playlist.get(songIndex).song.isPlaying()){
    playlist.get(songIndex).stopSong();
  }

  shufflePlaylist(playlist);
  songIndex = 0;

  playStatus = false;
  playSong = true;
  displayPlay = false;
  

} 

public void speedChanged(GSlider source, GEvent event) { //_CODE_:speed_slider:867952:
  
  float displaySpeed = speed_slider.getValueF(); //getting values from the slider

  playBackSpeed = map(displaySpeed, 0.0f,2, 0.6f, 1.4f);
  if(playlist.get(songIndex).song.isPlaying()){
    playlist.get(songIndex).song.rate(playBackSpeed);
  }
  
} 

public void volumeChanged(GSlider source, GEvent event) { //_CODE_:volume:779657:
  float displayVolume = volume.getValueF();

  setVolume = map(displayVolume, 0,10, 0.0f,3.0f);

  if(playlist.get(songIndex).song.isPlaying()){
    playlist.get(songIndex).song.amp(setVolume);
  }
} 

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:dropList1:447654:
  println("dropList1 - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:dropList1:447654:

// public void youtubeUrlChanged(GTextField source, GEvent event) { //_CODE_:YoutubeUrl:779815:
//   println("YoutubeUrl - GTextField >> GEvent." + event + " @ " + millis());
// } //_CODE_:YoutubeUrl:779815:

// public void youtubeCommitClicked(GButton source, GEvent event) { //_CODE_:youtubeCommit:244925:
//   println("youtubeCommit - GButton >> GEvent." + event + " @ " + millis());
// } //_CODE_:youtubeCommit:244925:


// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  play_button = new GImageButton(this, 600, 505, 60, 50, new String[] { "Black Play Button.png", "Black Play Button.png", "Black Play Button.png" } );
  play_button.addEventHandler(this, "playClicked");
  pause_button = new GImageButton(this, 575, 495, 100, 70, new String[] { "Black Pause Button.png", "Black Pause Button.png", "Black Pause Button.png" } );
  pause_button.addEventHandler(this, "pauseClicked");
  fast_foward_button = new GImageButton(this, 670, 505, 60, 50, new String[] { "Fast Forward Button.png", "Fast Forward Button.png", "Fast Forward Button.png" } );
  fast_foward_button.addEventHandler(this, "fastfowardClicked");
  rewind_button = new GImageButton(this, 520, 505, 60, 50, new String[] { "Rewind Button.png", "Rewind Button.png", "Rewind Button.png" } );
  rewind_button.addEventHandler(this, "rewindClicked");
  loop_button = new GImageButton(this, 320, 485, 100, 100, new String[] { "Black Loop Button.png","Black Loop Button.png" , "Black Loop Button.png" } );
  loop_button.addEventHandler(this, "loopClicked");
  loop_buttonWhite = new GImageButton(this, 320, 485, 100, 100, new String[] { "White Loop Button.png", "White Loop Button.png", "White Loop Button.png" } );
  loop_buttonWhite.addEventHandler(this, "whiteLoopClicked");
  shuff_button = new GImageButton(this, 420, 505, 100, 60, new String[] { "shuffle.png", "shuffle.png", "shuffle.png" } );
  shuff_button.addEventHandler(this, "shuffleClicked");
  speed_slider = new GSlider(this, 780, 480, 100, 50, 10.0f);
  speed_slider.setShowValue(true);
  speed_slider.setShowLimits(true);
  speed_slider.setLimits(1.0f, 0.1f, 2.0f);
  speed_slider.setNbrTicks(5);
  speed_slider.setStickToTicks(false);
  speed_slider.setShowTicks(false);
  speed_slider.setNumberFormat(G4P.DECIMAL, 1);
  speed_slider.setOpaque(false);
  speed_slider.addEventHandler(this, "speedChanged");
  volume = new GSlider(this, 780, 530, 100, 50, 10.0f);
  volume.setShowValue(true);
  volume.setShowLimits(true);
  volume.setLimits(3, 0.0f, 10);
  volume.setNbrTicks(10);
  volume.setStickToTicks(false);
  volume.setShowTicks(false);
  volume.setNumberFormat(G4P.DECIMAL, 2);
  volume.setOpaque(false);
  volume.addEventHandler(this, "volumeChanged");
  show_playlist = new GDropList(this, 50, 100, 103, 80, 3, 10);
  show_playlist.setItems(new String [] {"All Songs","Charlie's Songs","Lachlan's Songs"},0);
  show_playlist.addEventHandler(this, "show_playlistClicked");
//   youtubeUrl = new GTextField(this, 173, 64, 120, 30, G4P.SCROLLBARS_NONE);
//   youtubeUrl.setPromptText("Enter Url here");
//   youtubeUrl.setOpaque(true);
//   youtubeUrl.addEventHandler(this, "youtubeUrlChanged");
//   youtubeCommit = new GButton(this, 191, 140, 80, 30);
//   youtubeCommit.setText("Youtube Commit");
//   youtubeCommit.addEventHandler(this, "youtubeCommitClicked");
}



// Variable declarations 
// autogenerated do not edit
GImageButton play_button; 
GImageButton pause_button; 
GImageButton fast_foward_button; 
GImageButton rewind_button; 
GImageButton loop_button; 
GImageButton shuff_button; 
GSlider speed_slider; 
GSlider volume; 
GDropList show_playlist; 
GImageButton loop_buttonWhite; 
// GTextField youtubeUrl; 
// GButton youtubeCommit; 


  public void settings() { size(1200, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
