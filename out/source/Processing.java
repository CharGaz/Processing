/* autogenerated by Processing revision 1293 on 2024-11-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;
import g4p_controls.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Processing extends PApplet {





boolean playSong = false;
boolean playStatus = false; //Stops the terminal from being filled with messages

ArrayList<Song> playList1 = new ArrayList<Song>();
int songIndex = 0;
public void setup(){
    /* size commented out by preprocessor */;
    background(0);
    playList1.add(new Song(this,"Benzi Box.mp3","The Mouse and The Mask", "Mouse and the Mask.jpeg"));
    playList1.add(new Song(this, "Darling I.mp3","Chromakopia","Chromakopia Album.jpeg" ));
    playList1.add(new Song(this,"St Chroma.mp3","Chromakopia","Chromakopia Album.jpeg"));
    playList1.add(new Song(this, "Doomsday.mp3", "Operation: DOOMSDAY","Operation Doomsday Album Cover.jpeg" ));
    
    createGUI();
    
}

public void draw(){
    if(playList1.size() > 0){
        playList1.get(songIndex).displayArt(this);
    }
    playList1.get(songIndex).playSong();

    if(!playList1.get(songIndex).song.isPlaying() && playStatus ){
        playStatus = false;
        songIndex = (songIndex + 1) % playList1.size(); //loops songs in playlist
    }
    
    
}

public void shufflePlaylist(ArrayList<Song> playlist){
    if(playList1.size() < 2){
        return;
    }

    for(int i = playlist.size() - 1; i > 0; i-- ){
        int j = PApplet.parseInt(random(i+1)); //Random index from 1 - the size of the playlist
        Song temp = playlist.get(i);
        playlist.set(i, playlist.get(j));
        playlist.set(j,temp);
    }

}
class Song{
    String name;
    String album;
    String artWork;
    SoundFile song;
    PImage img;

    //CONSTRUCTOR:
    Song(PApplet sketch, String n, String a, String aw){
        this.name = n;
        this.album = a;
        this.artWork = aw;
        this.song = new SoundFile(sketch, n, false);
        this.img = sketch.loadImage(aw);
    }

    public void displayArt(PApplet sketch){
        
        if(img != null){
            sketch.image(img, 0,0, 800,800);
        }
        else{
            sketch.text("no image found",100,100);
        }
    
        
    }

    public void playSong(){
        if(playSong){
            if(!this.song.isPlaying() && !playStatus){ //Stops the song from playing 30 times per second
                this.song.play();
                playStatus = true;
                }
        }  
        else if(!playSong && playStatus){
            this.song.pause();
            playStatus = false;
        }
    }
    public void stopSong(){ // Stopung the current song when skip button is pressed
        if(this.song.isPlaying()){
            this.song.stop();
        }

    } 
 
}
/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw4(PApplet appc, GWinData data) { //_CODE_:hello:248823:
  appc.background(230);
} //_CODE_:hello:248823:

public void Pause_clicked(GButton source, GEvent event) { //_CODE_:p:482261:
  playSong = false;
} //_CODE_:p:482261:

public void Play_clicked(GButton source, GEvent event) { //_CODE_:Play:869780:
  playSong = true;
} //_CODE_:Play:869780:

public void shuffle_clicked(GButton source, GEvent event) { //_CODE_:shuffle:526257:
  if(playList1.get(songIndex).song.isPlaying()){
    playList1.get(songIndex).stopSong();
  }

  shufflePlaylist(playList1);
  songIndex = 0;

  playStatus = false;
  playSong = true;
} //_CODE_:shuffle:526257:

public void skip_cliked(GButton source, GEvent event) { //_CODE_:skip:211431:
  playList1.get(songIndex).stopSong();
  songIndex = (songIndex + 1) % playList1.size();
  playStatus = false;
} //_CODE_:skip:211431:

public void replay_clicked(GButton source, GEvent event) { //_CODE_:replay:953897:
  playList1.get(songIndex).stopSong();
  if(songIndex-1 != -1){
    songIndex = (songIndex-1) % playList1.size();
    playStatus = false;
  }
  else{
    println("cannot replay");
  }
} //_CODE_:replay:953897:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  hello = GWindow.getWindow(this, "Window titl", 0, 0, 240, 200, JAVA2D);
  hello.noLoop();
  hello.setActionOnClose(G4P.KEEP_OPEN);
  hello.addDrawHandler(this, "win_draw4");
  p = new GButton(hello, 4, 5, 80, 30);
  p.setText("Pause");
  p.addEventHandler(this, "Pause_clicked");
  Play = new GButton(hello, 97, 5, 80, 30);
  Play.setText("Play");
  Play.addEventHandler(this, "Play_clicked");
  shuffle = new GButton(hello, 4, 45, 80, 30);
  shuffle.setText("Shuffle");
  shuffle.addEventHandler(this, "shuffle_clicked");
  skip = new GButton(hello, 97, 45, 80, 30);
  skip.setText("Skip");
  skip.addEventHandler(this, "skip_cliked");
  replay = new GButton(hello, 5, 86, 80, 30);
  replay.setText("Prevoius Song");
  replay.addEventHandler(this, "replay_clicked");
  hello.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow hello;
GButton p; 
GButton Play; 
GButton shuffle; 
GButton skip; 
GButton replay; 


  public void settings() { size(1200, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Processing" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
